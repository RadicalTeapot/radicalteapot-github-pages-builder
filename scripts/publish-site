#!/usr/bin/env bash
set -eEuo pipefail

die() {
    local _ret="${2:-1}"
    [[ "${_PRINT_HELP:-no}" == "yes" ]] && print_help >&2
    printf '%s\n' "$1" >&2
    exit "$_ret"
}
trap 'die "Error (exit $?): ${BASH_SOURCE[1]}:${BASH_LINENO[0]} in ${FUNCNAME[1]:-main}" $?' ERR

print_help() {
    cat <<'USAGE'
Publish site to the specified output directory
Usage: publish-site [-c|--clean] [-h|--help] <source-directory> <output-directory>

Arguments:
    <source-directory>: Directory containing the site source files
    <output-directory>: Directory where the site will be published
    -c, --clean: Clean the output directory before publishing, default is off
    -h, --help: Show this help message and exit

Examples:
    publish-site ./site ./public
    publish-site --clean ./site ./public

Error codes:
    1: Invalid command line arguments
    2: Missing or invalid source or output directory argument
    3: Failed to copy files
USAGE
}

_positionals=()
_arg_clean="off"
_arg_source_directory=""
_arg_output_directory=""

_default_publish_args=(--only-published --missing-alias "warn")

parse_commandline() {
    _positionals_count=0
    local _key
    while [[ $# -gt 0 ]]; do
        _key="$1"
        case "$_key" in
        -c | --clean)
            _arg_clean="on"
            shift
            ;;
        -h | --help)
            print_help
            exit 0
            ;;
        --) # end argument parsing
            shift
            while [[ $# -gt 0 ]]; do
                _positionals+=("$1")
                shift
            done
            ;;
        -*) # unknown option
            die "Unknown option: '$_key'" 1
            ;;
        *) # positional argument
            _positionals+=("$1")
            shift
            ;;
        esac
    done

    _positionals_count="${#_positionals[@]}"
    if [[ "${_positionals_count}" -gt 2 ]]; then
        die "Too many positional arguments: expected at most 2, got ${_positionals_count}" 1
    fi
    if [[ "${_positionals_count}" -ge 1 ]]; then
        _arg_source_directory="${_positionals[0]}"
    fi
    if [[ "${_positionals_count}" -ge 2 ]]; then
        _arg_output_directory="${_positionals[1]}"
    fi
}

parse_commandline "$@"

# -- validate arguments --
if [[ -z "$_arg_source_directory" || -z "$_arg_output_directory" ]]; then
    die "Error: Both source and output directories must be specified." 2
fi
if [[ ! -d "$_arg_source_directory" ]]; then
    die "Error: Source directory '$_arg_source_directory' does not exist or is not a directory." 2
fi

# -- publish site --
if [[ "$_arg_clean" == "on" && -d "$_arg_output_directory" ]]; then
    rm -rf "$_arg_output_directory"
fi
if [[ ! -d "$_arg_output_directory" ]]; then
    mkdir -p "$_arg_output_directory"
fi

_files_to_copy=$(get-files-to-publish "$_arg_source_directory" "${_default_publish_args[@]}" | LC_ALL=C sort -u)
if [[ -z "$_files_to_copy" ]]; then
    echo "No files to publish." >&2
    exit 0
fi

declare -a _images_to_copy=()
while IFS= read -r _file; do
    while IFS= read -r _image; do
        _images_to_copy+=("$_image")
    done < <(extract-links "$_file" --images)
done <<<"$_files_to_copy"
_images_to_copy_unique=$(printf "%s\n" "${_images_to_copy[@]}" | LC_ALL=C sort -u)

for _file in $_files_to_copy; do
    _relative_path="${_file#"$_arg_source_directory"/}"
    _destination_path="$_arg_output_directory/$_relative_path"
    mkdir -p "$(dirname "$_destination_path")"
    echo "Copying '$_file' to '$_destination_path'" >&2
    if ! cp "$_file" "$_destination_path"; then
        die "Error: Failed to copy '$_file' to '$_destination_path'." 3
    fi

    _internal_links=$(extract-links "$_file" --internal || true)
    while IFS= read -r _link; do
        if [[ -n "$_link" ]] && ! [[ "$_files_to_copy" == *"$(_link)"* ]]; then
            echo "Warning: Internal link '$_link' in file '$_file' does not point to a published file." >&2
        fi
    done <<<"$_internal_links"
done

for _image in $_images_to_copy_unique; do
    if [[ -f "$_arg_source_directory/$_image" ]]; then
        _destination_path="$_arg_output_directory/$_image"
        mkdir -p "$(dirname "$_destination_path")"
        echo "Copying image '$_image' to '$_destination_path'" >&2
        if ! cp "$_arg_source_directory/$_image" "$_destination_path"; then
            die "Error: Failed to copy image '$_image' to '$_destination_path'." 3
        fi
    else
        echo "Warning: Image '$_image' not found in source directory." >&2
    fi
done
