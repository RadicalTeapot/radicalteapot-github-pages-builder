#!/usr/bin/env bash
set -eEuo pipefail

error() { printf '[ERROR] %s\n' "$*" >&2; }
is_on() { [[ "$1" == "on" ]]; }

die() {
    local _ret="${2:-1}"
    if is_on "${_PRINT_HELP:-no}"; then print_help >&2; fi
    error "$1"
    exit "$_ret"
}

trap 'die "Error (exit $?): ${BASH_SOURCE[1]}:${BASH_LINENO[0]} in ${FUNCNAME[1]-main}" $?' ERR

print_help() {
    cat <<'USAGE'
Output publishable markdown files in given directory
Usage: get-files-to-publish [-p|--(no-)only-published] [-m|--missing-alias <arg>] [-0|--print0] [-h|--help] <directory>

Arguments:
    <directory>: Directory containing the markdown files
    -p, --only-published, --no-only-published: Output only files with a 'publish: true' option in their front-matter (off by default)
    -m, --missing-alias: Check for 'aliases' option if 'slug' or 'url' is set in file front-matter ('ignore', 'warn', 'skip-file' or 'error'. Default: 'ignore')
    -0, --print0: Separate output filenames with null character (for use when piping to other commands)
    -h, --help: Prints help

Examples:
    get-files-to-publish ./content/posts
    get-files-to-publish -p ./content/posts
    get-files-to-publish --only-published --missing-alias warn ./content/posts

Dependencies:
    - frontmatter-parser
    - realpath
    - find
    - sed
    - Bash version 4.3 or higher

Error codes:
    1: Invalid command line arguments
    2: frontmatter-parser command not found
    3: Required command not found (realpath, find, readarray, sed)
    4: Invalid or missing directory argument
    5: Missing or invalid aliases in front-matter
    99: Unexpected error

Implementation notes:
    - Multiple markdown extensions supported via _markdown_extensions array
    - Directory argument is normalized to always end with a slash for alias matching
    - Alias matching strips extension for all supported markdown extensions
    - All required commands are checked before execution
USAGE
}

# DEFAULTS INITIALIZATION
_arg_only_published="off"
_arg_missing_alias="ignore"
_arg_print0="off"
_arg_directory=""
_markdown_extensions=("md")


parse_commandline() {
    local _key
    local -a _positionals=()
    while [[ $# -gt 0 ]]; do
        _key="$1"
        case "$_key" in
        -p | --no-only-published | --only-published)
            _arg_only_published="on"
            if [[ "${1:0:5}" == "--no-" ]]; then _arg_only_published="off"; fi
            shift
            ;;
        -m | --missing-alias)
            shift
            if [[ $# -lt 1 ]]; then
                _PRINT_HELP="on" die "--missing-alias requires a value." 1
            fi
            _arg_missing_alias="$1"
            shift
            ;;
        --missing-alias=*)
            _arg_missing_alias="${_key##--missing-alias=}"
            shift
            ;;
        -0 | --print0)
            _arg_print0="on"
            shift
            ;;
        -h | --help)
            print_help
            exit 0
            ;;
        --) # end of options
            shift
            while [[ $# -gt 0 ]]; do
                _positionals+=("$1")
                shift
            done
            ;;
        -*) # Unknown option
                _PRINT_HELP="on" die "Unknown option '$1'." 1
                ;;
        *)
            _positionals+=("$1")
            shift
            ;;
        esac
    done

    local -r _positionals_count=${#_positionals[@]}
    if [[ "${_positionals_count}" -lt 1 ]]; then
        _PRINT_HELP="on" die "One positional argument (directory) is required." 1
    fi
    if [[ "${_positionals_count}" -gt 1 ]]; then
        _PRINT_HELP="on" die "Too many positional arguments provided (expected 1, got $_positionals_count)." 1
    fi

    _arg_directory="${_positionals[0]}"
}

check_dependencies() {
    if ! command -v frontmatter-parser &>/dev/null; then
        die "Error: Could not find frontmatter-parser in PATH." 2
    fi
    if ! command -v realpath &>/dev/null; then
        die "Error: Could not find realpath in PATH." 3
    fi
    if ! command -v find &>/dev/null; then
        die "Error: Could not find find in PATH." 3
    fi
    if ! command -v sed &>/dev/null; then
        die "Error: Could not find sed in PATH." 3
    fi

    if (( BASH_VERSINFO[0] < 4 && BASH_VERSINFO[1] < 3 )); then
        die "Bash version 4.3 or higher is required. Current version is ${BASH_VERSION}." 3
    fi
}

validate_arguments() {
    [[ -z "$_arg_directory" ]] && die "Error: No source directory specified." 4
    if [[ ! -d "$_arg_directory" ]]; then
        die "Error: Source directory '$_arg_directory' does not exist." 4
    fi
    _arg_directory="${_arg_directory%/}/" # Normalize directory path to always end with a slash for alias matching

    case "$_arg_missing_alias" in
    ignore | warn | skip-file | error) ;;
    *)
        _PRINT_HELP="on" die "Invalid value for --missing-alias: '$_arg_missing_alias'. Must be one of: 'ignore', 'warn', 'skip-file', 'error'." 1
        ;;
    esac

    # Internal errors
    case "$_arg_only_published" in
        on | off) ;;
        *) die "Internal error: Invalid value for --only-published: '$_arg_only_published'. Allowed values are 'on' or 'off'." 1 ;;
    esac
    case "$_arg_print0" in
        on | off) ;;
        *) die "Internal error: Invalid value for --print0: '$_arg_print0'. Allowed values are 'on' or 'off'." 1 ;;
    esac
}

should_be_published() {
    local -r _file="${1?Missing file argument}"
    if ! is_on "$_arg_only_published"; then
        return 0
    elif _value=$(frontmatter-parser "$_file" --parameter "publish" 2>/dev/null); then
        [[ "${_value#*[$'\t']}" == "true" ]] && return 0
    fi
    return 1
}

get_aliases() {
    local -r _file="${1?Missing file argument}"
    local _aliases
    _aliases=$(frontmatter-parser "$_file" --parameter "aliases" 2>/dev/null) || return 1
    _aliases=${_aliases#*$'\t'}                          # drop leading key/sep if present
    _aliases=${_aliases//\"/}                            # drop quotes
    tr ',' '\n' <<<"$_aliases" | sed '/^[[:space:]]*$/d' # Replace commas with newlines and remove empty lines
}

check_valid_aliases() {
    local -r _file="${1?Missing file argument}"
    local _slug _url _aliases _aliases_array _relative_file_path

    if [[ "$_arg_missing_alias" == "ignore" ]]; then
        return 0
    fi

    _slug=$(frontmatter-parser "$_file" --parameter "slug" 2>/dev/null || echo "")
    _url=$(frontmatter-parser "$_file" --parameter "url" 2>/dev/null || echo "")

    if [[ -n "$_slug" || -n "$_url" ]]; then
        if ! _aliases=$(get_aliases "$_file"); then
            case "$_arg_missing_alias" in
            warn)
                echo "Warning: File '$_file' has 'slug' or 'url' set but no 'aliases' option." >&2
                return 0
                ;;
            skip-file)
                echo "Skipping file '$_file' because it has 'slug' or 'url' set but no 'aliases' option." >&2
                return 1
                ;;
            error)
                die "Error: File '$_file' has 'slug' or 'url' set but no 'aliases' option." 5
                ;;
            esac
        fi

        # Check if file is in aliases
        _relative_file_path="${_file#"$_arg_directory"}"
        for ext in "${_markdown_extensions[@]}"; do
            if [[ "$_relative_file_path" == *.$ext ]]; then
                _relative_file_path="${_relative_file_path%."$ext"}"
                break
            fi
        done
        local _found_alias="false"
        while IFS= read -r _alias; do
            if [[ "$_alias" == "$_relative_file_path" ]]; then
                _found_alias="true"
                break
            fi
        done <<<"$_aliases"

        if [[ "$_found_alias" == "false" ]]; then
            case "$_arg_missing_alias" in
            warn)
                echo "Warning: File '$_file' has 'slug' or 'url' set but its filename '$_relative_file_path' is not in 'aliases'." >&2
                ;;
            skip-file)
                echo "Skipping file '$_file' because it has 'slug' or 'url' set but its filename '$_relative_file_path' is not in 'aliases'." >&2
                return 1
                ;;
            error)
                die "Error: File '$_file' has 'slug' or 'url' set but its filename '$_relative_file_path' is not in 'aliases'." 5
                ;;
            esac
        fi
    fi
}

main() {
    # Validation and parsing
    check_dependencies
    parse_commandline "$@"
    validate_arguments

    # Find all markdown files in the specified directory (support multiple extensions)
    local -a _md_files=()
    local -a _tmp_arr=()
    local _ext
    for _ext in "${_markdown_extensions[@]}"; do
        readarray -t _tmp_arr < <(find "$_arg_directory" -type f -name "*.$_ext" -print0)
        _md_files+=("${_tmp_arr[@]}")
    done

    local -a _files_to_publish=()
    for _file in "${_md_files[@]}"; do
        if should_be_published "$_file" && check_valid_aliases "$_file"; then
            _files_to_publish+=("$(realpath "$_file")")
        fi
    done

    if is_on "$_arg_print0"; then
        printf '%s\0' "${_files_to_publish[@]}"
    else
        printf '%s\n' "${_files_to_publish[@]}"
    fi
}

main "$@"
