#!/usr/bin/env bash
set -eEuo pipefail

# Error codes
EX_USAGE=101          # CLI misuse / invalid flags
EX_NOINPUT=102        # Directory not found
EX_UNAVAILABLE=103    # Dependency missing / unusable
EX_FRONTMATTER=104    # No/empty/invalid front-matter
EX_NODATA=105         # No markdown files found
EX_INTERNAL=198       # Internal error
EX_UNKNOWN=199        # Unexpected error

# Usage string
USAGE="Usage: get-files-to-publish [--ignore-publish-state] [--alias-mode <arg>] [-0|--print0] [-h|--help] [-v|--verbose <level>] <directory>"

_verbose_level=1

debug() { if (( _verbose_level >= 3 )); then printf '[DEBUG] %s\n' "$*" >&2; fi; }
log()   { if (( _verbose_level >= 2 )); then printf '%s\n' "$*" >&2; fi; }
warn()  { if (( _verbose_level >= 1 )); then printf '[WARN] %s\n' "$*" >&2; fi; }
error() { printf '[ERROR] %s\n' "$*" >&2; }
is_on() { [[ "$1" == "on" ]]; }

die() {
    local -r _message="${1:-"Unknown error"}"
    local -r _ret="${2:-${EX_UNKNOWN}}"
    if is_on "${_PRINT_USAGE:-no}" && (( _verbose_level > 0 )); then "$USAGE" >&2; fi
    local _err_tag=""
    case "$_ret" in
        "$EX_USAGE") _err_tag="[USAGE]" ;;
        "$EX_NOINPUT") _err_tag="[NO_INPUT]" ;;
        "$EX_UNAVAILABLE") _err_tag="[UNAVAILABLE]" ;;
        "$EX_FRONTMATTER") _err_tag="[FRONTMATTER]" ;;
        "$EX_NODATA") _err_tag="[NO_DATA]" ;;
        "$EX_INTERNAL") _err_tag="[INTERNAL]" ;;
        "$EX_UNKNOWN") _err_tag="[UNKNOWN]" ;;
        *) _err_tag="[CODE_${_ret}]" ;;
    esac
    error "$_err_tag $_message"
    exit "$_ret"
}

trap 'die "(exit $?): ${BASH_SOURCE[1]:-${BASH_SOURCE[0]}}:${LINENO} in ${FUNCNAME[1]:-main}" ${EX_UNKNOWN}' ERR

print_help() {
    cat <<USAGE
Output publishable markdown files in given directory
${USAGE}

Arguments:
    <directory>: Directory containing the markdown files
    --ignore-publish-state  Ignore 'publish' option in front-matter (default: false)
    --alias-mode            Check for 'aliases' option if 'slug' or 'url' is set in file front-matter ('ignore', 'warn', 'error'. Default: 'ignore')
    -0, --print0            Separate output filenames with null character (for use when piping to other commands)
    -v, --verbose <level>   Set verbosity level (0 or 'quiet', 1 or 'normal' (default), 2 or 'verbose', 3 or 'debug')
    -h, --help              Display this help message and exit.

Examples:
    get-files-to-publish ./content/posts
    get-files-to-publish --ignore-publish-state ./content/posts
    get-files-to-publish --ignore-publish-state --alias-mode warn ./content/posts

Dependencies:
    - is-file-publishable
    - realpath
    - find
    - sed
    - Bash version 4.3 or higher

Error codes:
    ${EX_USAGE}         Command line usage error (invalid flags, missing arguments)
    ${EX_NOINPUT}       Input file not found
    ${EX_UNAVAILABLE}   Dependency missing or unusable (e.g., is-file-publishable not installed)
    ${EX_FRONTMATTER}   No/empty/invalid front-matter
    ${EX_NODATA}        No markdown files found
    ${EX_INTERNAL}      Internal error
    ${EX_UNKNOWN}       Unexpected error
USAGE
}

# DEFAULTS INITIALIZATION
_arg_verbose=1
_arg_ignore_publish_state="off"
_arg_missing_alias="ignore"
_arg_print0="off"
_arg_directory=""
_markdown_extensions=("md")


parse_commandline() {
    local _key
    local -a _positionals=()
    while [[ $# -gt 0 ]]; do
        _key="$1"
        case "$_key" in
        --ignore-publish-state)
            _arg_ignore_publish_state="on"
            shift
            ;;
        --alias-mode)
            shift
            if [[ $# -lt 1 ]]; then
                _PRINT_USAGE="on" die "--alias-mode requires a value." $EX_USAGE
            fi
            _arg_missing_alias="$1"
            shift
            ;;
        --alias-mode=*)
            _arg_missing_alias="${_key##--alias-mode=}"
            shift
            ;;
        -0 | --print0)
            _arg_print0="on"
            shift
            ;;
        -h | --help)
            print_help
            exit 0
            ;;
        -v | --verbose)
            shift
            if [[ $# -lt 1 ]]; then
                _PRINT_USAGE="on" die "--verbose requires a value." $EX_USAGE
            fi
            _arg_verbose="$1"
            shift
            ;;
        -v=* | --verbose=*)
            _arg_verbose="${_key##*=}"
            shift
            ;;
        --)
            # End of options
            shift
            while [[ $# -gt 0 ]]; do
                _positionals+=("$1")
                shift
            done
            ;;
        -*)
            # Unknown option
            _PRINT_USAGE="on" die "Unknown option '$1'." $EX_USAGE
            ;;
        *)
            _positionals+=("$1")
            shift
            ;;
        esac
    done

    local -r _positionals_count=${#_positionals[@]}
    if [[ "${_positionals_count}" -lt 1 ]]; then
        _PRINT_USAGE="on" die "One positional argument (directory) is required." $EX_USAGE
    fi
    if [[ "${_positionals_count}" -gt 1 ]]; then
        _PRINT_USAGE="on" die "Too many positional arguments provided (expected 1, got $_positionals_count)." $EX_USAGE
    fi

    _arg_directory="${_positionals[0]}"
}

check_dependencies() {
    if ! command -v is-file-publishable &>/dev/null; then
        die "Error: Could not find is-file-publishable in PATH." $EX_UNAVAILABLE
    fi
    if ! command -v realpath &>/dev/null; then
        die "Error: Could not find realpath in PATH." $EX_UNAVAILABLE
    fi
    if ! command -v find &>/dev/null; then
        die "Error: Could not find find in PATH." $EX_UNAVAILABLE
    fi
    if ! command -v sed &>/dev/null; then
        die "Error: Could not find sed in PATH." $EX_UNAVAILABLE
    fi

    if (( BASH_VERSINFO[0] < 4 || ( BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] < 3 ) )); then
        die "Bash version 4.3 or higher is required. Current version is ${BASH_VERSION}." $EX_UNAVAILABLE
    fi
}

validate_arguments() {
    [[ -z "$_arg_directory" ]] && die "Error: No source directory specified." $EX_USAGE
    if [[ ! -d "$_arg_directory" ]]; then
        die "Source directory '$_arg_directory' does not exist." $EX_NOINPUT
    fi
    _arg_directory="${_arg_directory%/}/" # Normalize directory path to always end with a slash for alias matching

    case "$_arg_missing_alias" in
    ignore | warn | error) ;;
    *)
        _PRINT_USAGE="on" die "Invalid value for --alias-mode: '$_arg_missing_alias'. Must be one of: 'ignore', 'warn', 'error'." $EX_USAGE
        ;;
    esac

    case "$_arg_verbose" in
        0 | quiet) _verbose_level=0 ;;
        1 | normal) _verbose_level=1 ;;
        2 | verbose) _verbose_level=2 ;;
        3 | debug) _verbose_level=3 ;;
        *)
            _PRINT_USAGE="on" die "Invalid value for --verbose: '$_arg_verbose'. Must be one of: 0 or 'quiet', 1 or 'normal', 2 or 'verbose', 3 or 'debug'." $EX_USAGE
            ;;
    esac

    # Internal errors
    case "$_arg_ignore_publish_state" in
        on | off) ;;
        *) die "Internal error: Invalid value for --only-published: '$_arg_ignore_publish_state'. Allowed values are 'on' or 'off'." $EX_INTERNAL ;;
    esac
    case "$_arg_print0" in
        on | off) ;;
        *) die "Internal error: Invalid value for --print0: '$_arg_print0'. Allowed values are 'on' or 'off'." $EX_INTERNAL ;;
    esac
}

main() {
    # Validation and parsing
    check_dependencies
    parse_commandline "$@"
    validate_arguments

    # Find all markdown files in the specified directory (support multiple extensions)
    local -a _md_files=()
    local _ext
    for _ext in "${_markdown_extensions[@]}"; do
        local -a _tmp_arr=()
        readarray -d '' -t _tmp_arr < <(find "$_arg_directory" -type f -name "*.$_ext" -print0)
        _md_files+=("${_tmp_arr[@]}")
    done

    if [[ "${#_md_files[@]}" -eq 0 ]]; then
        die "No markdown files found in $_arg_directory" $EX_NODATA
    fi

    # Run is-file-publishable in parallel on all found markdown files
    local -r _xargs_max_procs="${NPROC:-$(getconf _NPROCESSORS_ONLN 2>/dev/null || echo 4)}"
    debug "Using up to $_xargs_max_procs parallel processes for is-file-publishable"
    # TODO Restore skip-file option for missing alias and make custom command here for it
    local -r _xargs_command='file="$1"; is-file-publishable --ignore-publish-state '"$_arg_ignore_publish_state"' --alias-mode '"$_arg_missing_alias"' -- "$file" && printf "%s\0" "$file"'
    debug "xargs command: $_xargs_command"
    local -a _files_to_publish=()
    readarray -d '' -t _files_to_publish < <(printf '%s\0' "${_md_files[@]}" | xargs -0 -n 1 -P "$_xargs_max_procs" bash -c  "$_xargs_command" _)

    debug "Total publishable files found: ${#_files_to_publish[@]}"

    if [[ "${#_files_to_publish[@]}" -eq 0 ]]; then
        printf ''  # Print nothing
    else
        if is_on "$_arg_print0"; then
            printf '%s\0' "${_files_to_publish[@]}"
        else
            printf '%s\n' "${_files_to_publish[@]}"
        fi
    fi
}

main "$@"
